{"version":3,"sources":["InputField.tsx","Header.tsx","AccountActions.tsx","Accounts.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["InputField","label","props","size","useField","field","error","isInvalid","htmlFor","name","id","placeholder","Header","useDisclosure","isOpen","onOpen","onClose","bus","useBus","initialValues","account","onSubmit","values","a","setSubmitting","setErrors","axios","post","response","status","setTimeout","emit","undefined","statusText","message","isSubmitting","pb","mr","colorScheme","isLoading","type","onClick","p","color","bgColor","AccountActions","planTarget","plan","toast","useToast","isAttached","variant","execution","workflow_id","actor","to","then","r","data","title","description","duration","isClosable","catch","err","Accounts","useState","accounts","setAccounts","loadError","setLoadError","fetchAccounts","get","resp","executions","forEach","e","accountId","prevState","f","filter","length","push","useEffect","useListener","map","run_id","mt","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c45d8c27.chunk.js","sourcesContent":["import React, {InputHTMLAttributes} from 'react'\nimport {FormControl, FormErrorMessage, FormLabel, Input} from '@chakra-ui/react'\nimport {useField} from 'formik'\n\ntype InputFieldProps = InputHTMLAttributes<HTMLInputElement> & {\n  label: string\n  name: string\n}\n\nexport const InputField: React.FC<InputFieldProps> = ({label, size: _, ...props}) => {\n  const [field, {error}] = useField(props)\n    return (\n      <FormControl isInvalid={!!error}>\n        <FormLabel htmlFor={field.name}>{label}</FormLabel>\n        <Input {...field} {...props} id={field.name} placeholder={props.placeholder}/>\n        { error ? <FormErrorMessage>{error}</FormErrorMessage> : null }\n      </FormControl>\n    )\n}\n","import React from 'react'\nimport {\n  Box,\n  Button,\n  Flex,\n  Heading,\n  Modal, ModalBody,\n  ModalCloseButton,\n  ModalContent, ModalFooter,\n  ModalHeader,\n  ModalOverlay,\n  Spacer, useDisclosure\n} from '@chakra-ui/react'\nimport {Formik, Form} from 'formik'\nimport {InputField} from './InputField'\nimport {useBus} from 'react-bus'\nimport axios from 'axios'\n\ninterface HeaderProps {\n}\n\nexport const Header: React.FC<HeaderProps> = ({}) => {\n  const {isOpen, onOpen, onClose} = useDisclosure()\n  const bus = useBus()\n  return (\n    <>\n      <Modal\n        isOpen={isOpen}\n        onClose={onClose}\n      >\n        <ModalOverlay/>\n        <ModalContent>\n          <ModalHeader>Create your account</ModalHeader>\n          <ModalCloseButton/>\n          <Formik\n            initialValues={{account: ''}}\n            onSubmit={async (values, {setSubmitting, setErrors}) => {\n              if (values.account === '') {\n                setErrors({\n                  account: 'Account is required'\n                })\n                return\n              }\n              const account = { name: values.account }\n              try {\n                const response = await axios.post('http://localhost:8080/api/accounts', account)\n                if (response.status === 200) {\n                  setTimeout(function() {\n                    bus.emit('fetchAccounts', undefined)\n                  }, 500)\n                } else {\n                  setErrors({\n                    account: response.statusText\n                  })\n                }\n              } catch (e) {\n                setErrors({\n                  account: e.message\n                })\n              }\n              return onClose()\n            }}\n          >\n            {({isSubmitting}) => (\n              <Form>\n                <ModalBody pb={6}>\n                  <InputField name=\"account\" placeholder=\"account\" label=\"Account name\"/>\n                </ModalBody>\n\n                <ModalFooter>\n                  <Button\n                    mr={2}\n                    colorScheme=\"teal\"\n                    isLoading={isSubmitting}\n                    type=\"submit\"\n                  >\n                    Save\n                  </Button>\n                  <Button onClick={onClose}>Cancel</Button>\n                </ModalFooter>\n              </Form>\n            )}\n          </Formik>\n        </ModalContent>\n      </Modal>\n\n      <Flex p=\"2\" color=\"white\" bgColor=\"teal\">\n        <Box p=\"2\">\n          <Heading size=\"md\">Interactive UI signal - web client</Heading>\n        </Box>\n        <Spacer/>\n        <Box>\n          <Button colorScheme=\"teal\" onClick={onOpen}>New account</Button>\n        </Box>\n      </Flex>\n    </>\n  )\n}\n","import React from 'react'\nimport {Button, ButtonGroup, useToast} from '@chakra-ui/react'\nimport {Account} from './Accounts'\nimport axios from 'axios'\nimport {useBus} from 'react-bus'\n\ninterface AccountActionsProps {\n  account: Account\n  plan: string\n}\n\nexport const AccountActions: React.FC<AccountActionsProps> = ({account, plan}) => {\n  const planTarget = plan === 'trial' ? 'premium' : 'trial'\n  const toast = useToast()\n  const bus = useBus()\n  return (\n    <ButtonGroup size=\"sm\" isAttached variant=\"outline\">\n      <Button\n        mr=\"-px\"\n        onClick={() => {\n          axios.post(\n            'http://localhost:8080/api/account/upgrade',\n            {account: account.execution.workflow_id, actor: account.execution.workflow_id, to: planTarget }\n          ).then(r => {\n            if (r.status === 200) {\n              if (r.data.error) {\n                toast({\n                  title: \"Account upgrade failed.\",\n                  description: r.data.error,\n                  status: \"error\",\n                  duration: 5000,\n                  isClosable: true,\n                })\n              } else {\n                // reload UI\n                setTimeout(function() {\n                  bus.emit('fetchAccounts', undefined)\n                }, 1000)\n                // inform user\n                toast({\n                  title: \"Account changed.\",\n                  description: `Account successfully changed to ${planTarget}.`,\n                  status: \"success\",\n                  duration: 3000,\n                  isClosable: true,\n                })\n              }\n            }\n          }).catch(err => {\n            toast({\n              title: \"Account upgrade failed.\",\n              description: err.message,\n              status: \"error\",\n              duration: 5000,\n              isClosable: true,\n            })\n          })\n        }}\n      >Move to {planTarget}</Button>\n      <Button\n        mr=\"-px\"\n        colorScheme=\"red\"\n        onClick={() =>{\n          axios.post(\n            'http://localhost:8080/api/account/delete',\n            {account: account.execution.workflow_id, actor: account.execution.workflow_id }\n          ).then(r => {\n            if (r.status === 200) {\n              if (r.data.error) {\n                toast({\n                  title: \"Account upgrade failed.\",\n                  description: r.data.error,\n                  status: \"error\",\n                  duration: 5000,\n                  isClosable: true,\n                })\n              } else {\n                // reload UI\n                setTimeout(function() {\n                  bus.emit('fetchAccounts', undefined)\n                }, 1000)\n                // inform user\n                toast({\n                  title: \"Account deleted.\",\n                  description: \"Account successfully deleted.\",\n                  status: \"success\",\n                  duration: 3000,\n                  isClosable: true,\n                })\n              }\n            }\n          }).catch(err => {\n            toast({\n              title: \"Account deletion failed.\",\n              description: err.message,\n              status: \"error\",\n              duration: 5000,\n              isClosable: true,\n            })\n          })\n        }}\n      >Delete</Button>\n    </ButtonGroup>\n  )\n}\n","import React, {useEffect, useState} from 'react'\nimport {\n    Alert,\n    AlertDescription,\n    AlertIcon,\n    AlertTitle,\n    Box,\n    Center,\n    Table,\n    TableCaption,\n    Tbody,\n    Td,\n    Th,\n    Thead,\n    Tr\n} from '@chakra-ui/react'\nimport {useListener} from 'react-bus'\nimport {AccountActions} from './AccountActions'\nimport axios from 'axios'\n\nexport type Execution = {\n    workflow_id: string\n    run_id: string\n}\n\nexport type Account = {\n    execution: Execution\n    type: { name: string }\n    execution_time: string\n    start_time: string\n    status: number\n    memo: { [k: string]: any }\n    plan: string\n}\n\ninterface AccountsProps {\n}\n\nexport const Accounts: React.FC<AccountsProps> = ({}) => {\n    const [accounts, setAccounts] = useState<Account[]>([])\n    const [loadError, setLoadError] = useState<string | undefined>(undefined)\n    const updateAccountPlan = (accountId: string, plan: string) => {\n        setAccounts(prevState => {\n            const f = prevState.filter(a => a.execution.workflow_id === accountId && a.plan !== plan)\n            if (f.length > 0) {\n                f[0].plan = plan\n                return [...prevState]\n            }\n            return prevState\n        })\n    }\n\n    const fetchAccounts = () => {\n        axios.get('http://localhost:8080/api/accounts')\n            .then(resp => {\n                if (!resp.data) {\n                    return\n                }\n                const accounts = []\n                if (resp.data.executions) {\n                    resp.data.executions.forEach((e: Account) => {\n                        e.plan = 'loading'\n                        axios.get('http://localhost:8080/api/plan?account=' + e.execution.workflow_id)\n                            .then(r => {\n                                if (r.status === 200) {\n                                    updateAccountPlan(e.execution.workflow_id, r.data.plan)\n                                }\n                            })\n                    })\n                    accounts.push(...resp.data.executions)\n                }\n                setAccounts(accounts)\n                setLoadError(undefined)\n            })\n            .catch(err => {\n                setLoadError(err.message)\n            })\n    }\n    useEffect(fetchAccounts, [])\n\n    useListener('fetchAccounts', fetchAccounts)\n\n    return typeof loadError === 'undefined' ? (\n        <Table variant=\"simple\">\n            <TableCaption>System accounts</TableCaption>\n            <Thead>\n                <Tr>\n                    <Th>Name</Th>\n                    <Th>Type</Th>\n                    <Th>Actions</Th>\n                </Tr>\n            </Thead>\n            <Tbody>\n                {\n                    accounts.map(a =>\n                        (\n                            <Tr key={a.execution.run_id}>\n                                <Td>{a.execution.workflow_id}</Td>\n                                <Td>\n                                    {a.plan}\n                                </Td>\n                                <Td><AccountActions account={a} plan={a.plan}/></Td>\n                            </Tr>\n                        ))\n                }\n            </Tbody>\n        </Table>\n    ) : (\n        <Center>\n            <Box mt={16}>\n                <Alert status=\"error\">\n                    <AlertIcon/>\n                    <AlertTitle mr={2}>API error</AlertTitle>\n                    <AlertDescription>{loadError}</AlertDescription>\n                </Alert>\n            </Box>\n        </Center>\n    )\n}\n","import React from 'react'\nimport './App.css'\n\nimport {ChakraProvider} from '@chakra-ui/react'\nimport {Header} from './Header'\nimport {Accounts} from './Accounts'\nimport {Provider as BusProvider} from 'react-bus'\n\ninterface AppProps {}\n\nexport const App: React.FC<AppProps> = ({}) => {\n    return (\n      <ChakraProvider>\n        <BusProvider>\n          <Header/>\n          <Accounts/>\n        </BusProvider>\n      </ChakraProvider>\n    )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}